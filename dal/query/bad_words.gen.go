// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/tdfxlyh/go-gin-api/dal/models"
)

func newBadWord(db *gorm.DB, opts ...gen.DOOption) badWord {
	_badWord := badWord{}

	_badWord.badWordDo.UseDB(db, opts...)
	_badWord.badWordDo.UseModel(&models.BadWord{})

	tableName := _badWord.badWordDo.TableName()
	_badWord.ALL = field.NewAsterisk(tableName)
	_badWord.ID = field.NewInt64(tableName, "id")
	_badWord.Content = field.NewString(tableName, "content")
	_badWord.CreateUserID = field.NewInt64(tableName, "create_user_id")
	_badWord.Extra = field.NewString(tableName, "extra")
	_badWord.CreateTime = field.NewTime(tableName, "create_time")
	_badWord.ModifyTime = field.NewTime(tableName, "modify_time")
	_badWord.Status = field.NewInt32(tableName, "status")

	_badWord.fillFieldMap()

	return _badWord
}

type badWord struct {
	badWordDo badWordDo

	ALL          field.Asterisk
	ID           field.Int64  // 主键id
	Content      field.String // 敏感词内容
	CreateUserID field.Int64  // 创建用户id
	Extra        field.String // 扩展信息
	CreateTime   field.Time   // 创建时间
	ModifyTime   field.Time   // 修改时间
	Status       field.Int32  // 0存在，1删除

	fieldMap map[string]field.Expr
}

func (b badWord) Table(newTableName string) *badWord {
	b.badWordDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b badWord) As(alias string) *badWord {
	b.badWordDo.DO = *(b.badWordDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *badWord) updateTableName(table string) *badWord {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.Content = field.NewString(table, "content")
	b.CreateUserID = field.NewInt64(table, "create_user_id")
	b.Extra = field.NewString(table, "extra")
	b.CreateTime = field.NewTime(table, "create_time")
	b.ModifyTime = field.NewTime(table, "modify_time")
	b.Status = field.NewInt32(table, "status")

	b.fillFieldMap()

	return b
}

func (b *badWord) WithContext(ctx context.Context) *badWordDo { return b.badWordDo.WithContext(ctx) }

func (b badWord) TableName() string { return b.badWordDo.TableName() }

func (b badWord) Alias() string { return b.badWordDo.Alias() }

func (b *badWord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *badWord) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 7)
	b.fieldMap["id"] = b.ID
	b.fieldMap["content"] = b.Content
	b.fieldMap["create_user_id"] = b.CreateUserID
	b.fieldMap["extra"] = b.Extra
	b.fieldMap["create_time"] = b.CreateTime
	b.fieldMap["modify_time"] = b.ModifyTime
	b.fieldMap["status"] = b.Status
}

func (b badWord) clone(db *gorm.DB) badWord {
	b.badWordDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b badWord) replaceDB(db *gorm.DB) badWord {
	b.badWordDo.ReplaceDB(db)
	return b
}

type badWordDo struct{ gen.DO }

func (b badWordDo) Debug() *badWordDo {
	return b.withDO(b.DO.Debug())
}

func (b badWordDo) WithContext(ctx context.Context) *badWordDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b badWordDo) ReadDB() *badWordDo {
	return b.Clauses(dbresolver.Read)
}

func (b badWordDo) WriteDB() *badWordDo {
	return b.Clauses(dbresolver.Write)
}

func (b badWordDo) Session(config *gorm.Session) *badWordDo {
	return b.withDO(b.DO.Session(config))
}

func (b badWordDo) Clauses(conds ...clause.Expression) *badWordDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b badWordDo) Returning(value interface{}, columns ...string) *badWordDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b badWordDo) Not(conds ...gen.Condition) *badWordDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b badWordDo) Or(conds ...gen.Condition) *badWordDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b badWordDo) Select(conds ...field.Expr) *badWordDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b badWordDo) Where(conds ...gen.Condition) *badWordDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b badWordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *badWordDo {
	return b.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (b badWordDo) Order(conds ...field.Expr) *badWordDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b badWordDo) Distinct(cols ...field.Expr) *badWordDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b badWordDo) Omit(cols ...field.Expr) *badWordDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b badWordDo) Join(table schema.Tabler, on ...field.Expr) *badWordDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b badWordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *badWordDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b badWordDo) RightJoin(table schema.Tabler, on ...field.Expr) *badWordDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b badWordDo) Group(cols ...field.Expr) *badWordDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b badWordDo) Having(conds ...gen.Condition) *badWordDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b badWordDo) Limit(limit int) *badWordDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b badWordDo) Offset(offset int) *badWordDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b badWordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *badWordDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b badWordDo) Unscoped() *badWordDo {
	return b.withDO(b.DO.Unscoped())
}

func (b badWordDo) Create(values ...*models.BadWord) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b badWordDo) CreateInBatches(values []*models.BadWord, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b badWordDo) Save(values ...*models.BadWord) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b badWordDo) First() (*models.BadWord, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.BadWord), nil
	}
}

func (b badWordDo) Take() (*models.BadWord, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.BadWord), nil
	}
}

func (b badWordDo) Last() (*models.BadWord, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.BadWord), nil
	}
}

func (b badWordDo) Find() ([]*models.BadWord, error) {
	result, err := b.DO.Find()
	return result.([]*models.BadWord), err
}

func (b badWordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.BadWord, err error) {
	buf := make([]*models.BadWord, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b badWordDo) FindInBatches(result *[]*models.BadWord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b badWordDo) Attrs(attrs ...field.AssignExpr) *badWordDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b badWordDo) Assign(attrs ...field.AssignExpr) *badWordDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b badWordDo) Joins(fields ...field.RelationField) *badWordDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b badWordDo) Preload(fields ...field.RelationField) *badWordDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b badWordDo) FirstOrInit() (*models.BadWord, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.BadWord), nil
	}
}

func (b badWordDo) FirstOrCreate() (*models.BadWord, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.BadWord), nil
	}
}

func (b badWordDo) FindByPage(offset int, limit int) (result []*models.BadWord, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b badWordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b badWordDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b badWordDo) Delete(models ...*models.BadWord) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *badWordDo) withDO(do gen.Dao) *badWordDo {
	b.DO = *do.(*gen.DO)
	return b
}
