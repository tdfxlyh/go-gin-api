// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/tdfxlyh/go-gin-api/dal/models"
)

func newFriendRelation(db *gorm.DB, opts ...gen.DOOption) friendRelation {
	_friendRelation := friendRelation{}

	_friendRelation.friendRelationDo.UseDB(db, opts...)
	_friendRelation.friendRelationDo.UseModel(&models.FriendRelation{})

	tableName := _friendRelation.friendRelationDo.TableName()
	_friendRelation.ALL = field.NewAsterisk(tableName)
	_friendRelation.ID = field.NewInt64(tableName, "id")
	_friendRelation.UserID = field.NewInt64(tableName, "user_id")
	_friendRelation.OtherUserID = field.NewInt64(tableName, "other_user_id")
	_friendRelation.VerifyMessage = field.NewString(tableName, "verify_message")
	_friendRelation.Notes = field.NewString(tableName, "notes")
	_friendRelation.RelaStatus = field.NewInt64(tableName, "rela_status")
	_friendRelation.Extra = field.NewString(tableName, "extra")
	_friendRelation.CreateTime = field.NewTime(tableName, "create_time")
	_friendRelation.ModifyTime = field.NewTime(tableName, "modify_time")
	_friendRelation.Status = field.NewInt32(tableName, "status")

	_friendRelation.fillFieldMap()

	return _friendRelation
}

type friendRelation struct {
	friendRelationDo friendRelationDo

	ALL           field.Asterisk
	ID            field.Int64  // 主键id
	UserID        field.Int64  // 自己用户id
	OtherUserID   field.Int64  // 朋友用户id
	VerifyMessage field.String // 验证消息
	Notes         field.String // 备注
	RelaStatus    field.Int64  // 关系状态-1:请求中,2:好友
	Extra         field.String // 扩展信息
	CreateTime    field.Time   // 创建时间
	ModifyTime    field.Time   // 修改时间
	Status        field.Int32  // 0存在，1删除

	fieldMap map[string]field.Expr
}

func (f friendRelation) Table(newTableName string) *friendRelation {
	f.friendRelationDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f friendRelation) As(alias string) *friendRelation {
	f.friendRelationDo.DO = *(f.friendRelationDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *friendRelation) updateTableName(table string) *friendRelation {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.UserID = field.NewInt64(table, "user_id")
	f.OtherUserID = field.NewInt64(table, "other_user_id")
	f.VerifyMessage = field.NewString(table, "verify_message")
	f.Notes = field.NewString(table, "notes")
	f.RelaStatus = field.NewInt64(table, "rela_status")
	f.Extra = field.NewString(table, "extra")
	f.CreateTime = field.NewTime(table, "create_time")
	f.ModifyTime = field.NewTime(table, "modify_time")
	f.Status = field.NewInt32(table, "status")

	f.fillFieldMap()

	return f
}

func (f *friendRelation) WithContext(ctx context.Context) *friendRelationDo {
	return f.friendRelationDo.WithContext(ctx)
}

func (f friendRelation) TableName() string { return f.friendRelationDo.TableName() }

func (f friendRelation) Alias() string { return f.friendRelationDo.Alias() }

func (f *friendRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *friendRelation) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 10)
	f.fieldMap["id"] = f.ID
	f.fieldMap["user_id"] = f.UserID
	f.fieldMap["other_user_id"] = f.OtherUserID
	f.fieldMap["verify_message"] = f.VerifyMessage
	f.fieldMap["notes"] = f.Notes
	f.fieldMap["rela_status"] = f.RelaStatus
	f.fieldMap["extra"] = f.Extra
	f.fieldMap["create_time"] = f.CreateTime
	f.fieldMap["modify_time"] = f.ModifyTime
	f.fieldMap["status"] = f.Status
}

func (f friendRelation) clone(db *gorm.DB) friendRelation {
	f.friendRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f friendRelation) replaceDB(db *gorm.DB) friendRelation {
	f.friendRelationDo.ReplaceDB(db)
	return f
}

type friendRelationDo struct{ gen.DO }

func (f friendRelationDo) Debug() *friendRelationDo {
	return f.withDO(f.DO.Debug())
}

func (f friendRelationDo) WithContext(ctx context.Context) *friendRelationDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f friendRelationDo) ReadDB() *friendRelationDo {
	return f.Clauses(dbresolver.Read)
}

func (f friendRelationDo) WriteDB() *friendRelationDo {
	return f.Clauses(dbresolver.Write)
}

func (f friendRelationDo) Session(config *gorm.Session) *friendRelationDo {
	return f.withDO(f.DO.Session(config))
}

func (f friendRelationDo) Clauses(conds ...clause.Expression) *friendRelationDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f friendRelationDo) Returning(value interface{}, columns ...string) *friendRelationDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f friendRelationDo) Not(conds ...gen.Condition) *friendRelationDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f friendRelationDo) Or(conds ...gen.Condition) *friendRelationDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f friendRelationDo) Select(conds ...field.Expr) *friendRelationDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f friendRelationDo) Where(conds ...gen.Condition) *friendRelationDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f friendRelationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *friendRelationDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f friendRelationDo) Order(conds ...field.Expr) *friendRelationDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f friendRelationDo) Distinct(cols ...field.Expr) *friendRelationDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f friendRelationDo) Omit(cols ...field.Expr) *friendRelationDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f friendRelationDo) Join(table schema.Tabler, on ...field.Expr) *friendRelationDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f friendRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *friendRelationDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f friendRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) *friendRelationDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f friendRelationDo) Group(cols ...field.Expr) *friendRelationDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f friendRelationDo) Having(conds ...gen.Condition) *friendRelationDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f friendRelationDo) Limit(limit int) *friendRelationDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f friendRelationDo) Offset(offset int) *friendRelationDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f friendRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *friendRelationDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f friendRelationDo) Unscoped() *friendRelationDo {
	return f.withDO(f.DO.Unscoped())
}

func (f friendRelationDo) Create(values ...*models.FriendRelation) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f friendRelationDo) CreateInBatches(values []*models.FriendRelation, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f friendRelationDo) Save(values ...*models.FriendRelation) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f friendRelationDo) First() (*models.FriendRelation, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.FriendRelation), nil
	}
}

func (f friendRelationDo) Take() (*models.FriendRelation, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.FriendRelation), nil
	}
}

func (f friendRelationDo) Last() (*models.FriendRelation, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.FriendRelation), nil
	}
}

func (f friendRelationDo) Find() ([]*models.FriendRelation, error) {
	result, err := f.DO.Find()
	return result.([]*models.FriendRelation), err
}

func (f friendRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.FriendRelation, err error) {
	buf := make([]*models.FriendRelation, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f friendRelationDo) FindInBatches(result *[]*models.FriendRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f friendRelationDo) Attrs(attrs ...field.AssignExpr) *friendRelationDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f friendRelationDo) Assign(attrs ...field.AssignExpr) *friendRelationDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f friendRelationDo) Joins(fields ...field.RelationField) *friendRelationDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f friendRelationDo) Preload(fields ...field.RelationField) *friendRelationDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f friendRelationDo) FirstOrInit() (*models.FriendRelation, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.FriendRelation), nil
	}
}

func (f friendRelationDo) FirstOrCreate() (*models.FriendRelation, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.FriendRelation), nil
	}
}

func (f friendRelationDo) FindByPage(offset int, limit int) (result []*models.FriendRelation, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f friendRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f friendRelationDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f friendRelationDo) Delete(models ...*models.FriendRelation) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *friendRelationDo) withDO(do gen.Dao) *friendRelationDo {
	f.DO = *do.(*gen.DO)
	return f
}
